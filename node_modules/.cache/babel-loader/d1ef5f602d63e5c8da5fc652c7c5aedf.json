{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co'; //const handleResponse = response => response.ok ? response.json() : Promise.reject(`Ошибка №${response.status}`);\n\nexport const authorize = data => {\n  console.log('auth:', data.identifier, data.password);\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'password': data.password,\n      'email': data.identifier\n    })\n    /*\n    body: {\n      password: data.password,\n      email: data.identifier,\n    }\n    */\n\n  }).then(response => {\n    console.log(' =_=_=> ');\n    return response.json();\n  });\n}; //export const regg = (data) => {\n\nexport const regg = data => {\n  //console.log('regGg:', data)\n  console.log('regGg:', data.password, data.identifier); //console.log('идет отправка:', JSON.stringify(data.password, data.identifier)\n\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'password': data.password,\n      'email': data.identifier\n    }) // почему из всех вариантов сработал именно этот я не понимаю\n\n    /*\n    body: {\n      password: data.password,\n      email: data.identifier,\n    }\n    */\n    //body: JSON.stringify({password, identifier})\n\n  }) //.then(handleResponse)\n  .then(response => {\n    console.log(' =====> ');\n    return response.json();\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(response => {\n    console.log(' =j=w=t> ');\n    return response.json();\n  });\n}; //JSON.stringify({identifier, password})\n\n/*\nreturn fetch(this._url+this._cards, {\n  method: 'POST',\n  headers: {\n    authorization: this._token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: obj.name,\n    link: obj.link,\n  })\n}).then(\n  (res) => this._getResponseData(res)\n)\n*/","map":{"version":3,"sources":["/home/r/pr/Yandex_Praktikum/react-mesto-auth/src/components/Auth.js"],"names":["BASE_URL","authorize","data","console","log","identifier","password","fetch","method","headers","body","JSON","stringify","then","response","json","regg","getContent","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEP;;AAEA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAU;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,IAAI,CAACG,UAA1B,EAAsCH,IAAI,CAACI,QAA3C;AACA,SAAOC,KAAK,CAAE,GAAEP,QAAS,SAAb,EAAuB;AACjCQ,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAWV,IAAI,CAACI,QAAjB;AAA0B,eAAQJ,IAAI,CAACG;AAAvC,KAAf;AACN;AACJ;AACA;AACA;AACA;AACA;;AAZqC,GAAvB,CAAL,CAcNQ,IAdM,CAcAC,QAAD,IAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAOU,QAAQ,CAACC,IAAT,EAAP;AACD,GAjBM,CAAP;AAkBD,CApBM,C,CAsBP;;AACA,OAAO,MAAMC,IAAI,GAAId,IAAD,IAAU;AAC5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAI,CAACI,QAA3B,EAAqCJ,IAAI,CAACG,UAA1C,EAF4B,CAI5B;;AACA,SAAOE,KAAK,CAAE,GAAEP,QAAS,SAAb,EAAuB;AACjCQ,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAWV,IAAI,CAACI,QAAjB;AAA0B,eAAQJ,IAAI,CAACG;AAAvC,KAAf,CAN2B,CAMwC;;AACzE;AACJ;AACA;AACA;AACA;AACA;AACI;;AAbiC,GAAvB,CAAL,CAeP;AAfO,GAgBNQ,IAhBM,CAgBAC,QAAD,IAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAOU,QAAQ,CAACC,IAAT,EAAP;AACD,GAnBM,CAAP;AAoBD,CAzBM;AA2BP,OAAO,MAAME,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOX,KAAK,CAAE,GAAEP,QAAS,WAAb,EAAyB;AACnCQ,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASS,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNL,IARM,CAQAC,QAAD,IAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAOU,QAAQ,CAACC,IAAT,EAAP;AACD,GAXM,CAAP;AAYD,CAbM,C,CAeP;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co'\n\n//const handleResponse = response => response.ok ? response.json() : Promise.reject(`Ошибка №${response.status}`);\n\nexport const authorize = (data) => {\n  console.log('auth:', data.identifier, data.password )\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({'password':data.password,'email':data.identifier})\n    /*\n    body: {\n      password: data.password,\n      email: data.identifier,\n    }\n    */\n  })\n  .then((response) => {\n    console.log(' =_=_=> ')\n    return response.json();\n  })\n}\n\n//export const regg = (data) => {\nexport const regg = (data) => {\n  //console.log('regGg:', data)\n  console.log('regGg:', data.password, data.identifier)\n\n  //console.log('идет отправка:', JSON.stringify(data.password, data.identifier)\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({'password':data.password,'email':data.identifier}) // почему из всех вариантов сработал именно этот я не понимаю\n    /*\n    body: {\n      password: data.password,\n      email: data.identifier,\n    }\n    */\n    //body: JSON.stringify({password, identifier})\n  })\n  //.then(handleResponse)\n  .then((response) => {\n    console.log(' =====> ')\n    return response.json();\n  })\n}\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((response) => {\n    console.log(' =j=w=t> ')\n    return response.json();\n  })\n}\n\n//JSON.stringify({identifier, password})\n/*\nreturn fetch(this._url+this._cards, {\n  method: 'POST',\n  headers: {\n    authorization: this._token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: obj.name,\n    link: obj.link,\n  })\n}).then(\n  (res) => this._getResponseData(res)\n)\n*/\n"]},"metadata":{},"sourceType":"module"}